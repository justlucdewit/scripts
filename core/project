#! /bin/bash

source "$HOME/scripts/core/lsr.core.sh"

LSR_SET_COMMAND "project"
LSR_SET_SUBCOMMAND "list"
LSR_SET_SUBCOMMAND "go" "<projectname>"
LSR_SET_SUBCOMMAND "install"
LSR_SET_SUBCOMMAND "current"
LSR_SET_SUBCOMMAND "info" "<projectname>"
# LSR_SET_SUBCOMMAND "select"

LSR_DESCRIBE_SUBCOMMAND "list" "List all of the registered projects and demos"
LSR_DESCRIBE_SUBCOMMAND "go" "Go to the directory of the project"
LSR_DESCRIBE_SUBCOMMAND "install" "Install the project locally"
LSR_DESCRIBE_SUBCOMMAND "current" "Shows the current project code"
LSR_DESCRIBE_SUBCOMMAND "info" "Show info about project"

project_info() {
    local project_code="$1"
    if [[ ! -n "$project_code" ]]; then
        project_code="$(project_current)"
    fi

    # Find the json object belonging to this project
    local project_json1="$(jq -r ".[] | select(.code == \"$project_code\")" "$HOME/projects/projects.json")"
    local project_json2="$(jq -r ".[] | select(.code == \"website-$project_code\")" "$HOME/projects/projects.json")"

    local project_json="$project_json1"
    if str_empty "$project_json"; then
        project_json="$project_json2"
    fi

    local project_active="$(echo "$project_json" | jq -r ".active")"
    local project_repo="$(echo "$project_json" | jq -r ".repo")"
    local project_code="$(echo "$project_json" | jq -r ".code")"
    local project_websites="$(echo "$project_json" | jq -r "(.sites // []) | to_entries[] | .key")"
    local project_servers="$(echo "$project_json" | jq -r "(.forgeIds // []) | to_entries[] | .key")"

    echo "Project Info for '$project_code'"
    if str_equals "$project_active" "true"; then
        echo "  - Project is active"
    else
        echo "  - Project is inactive"
    fi

    echo "  - Repository: https://bitbucket.org/xingredient/$project_repo/src"

    if ! str_empty "$project_websites"; then
        IFS=' '
        echo 
        echo "Websites: "
        for website in $(echo "$project_websites" | tr '\n' ' '); do
            local url="$(echo "$project_json" | jq -r ".sites.$website")"
            echo "  - website $website: $url"
        done
    fi

    if ! str_empty "$project_servers"; then
        IFS=' '
        echo 
        echo "Forge servers: "
        for server in $(echo "$project_servers" | tr '\n' ' '); do
            local server_id="$(echo "$project_json" | jq -r ".forgeIds.$server.server")"
            local site_id="$(echo "$project_json" | jq -r ".forgeIds.$server.site")"
            echo "  - server $server: https://forge.laravel.com/servers/$server_id/sites/$site_id"
        done
    fi

    local uses_node=false
    if [[ -f "$HOME/projects/$project_repo/package.json" ]]; then
        uses_node=true
    fi

    local uses_composer=false
    if [[ -f "$HOME/projects/$project_repo/composer.json" ]]; then
        uses_composer=true
    fi

    if [[ -f "$HOME/projects/$project_repo/_lsr_scripts/_project.env" ]]; then
        echo
        local node_version_line="$(cat "$HOME/projects/$project_repo/_lsr_scripts/_project.env" | grep "NODE_VERSION=")"
        local node_version="${node_version_line#*=}"

        local php_version_line="$(cat "$HOME/projects/$project_repo/_lsr_scripts/_project.env" | grep "PHP_VERSION=")"
        local php_version="${php_version_line#*=}"

        echo "Technology"

        if str_equals "$uses_node" "true"; then
            echo "  - NodeJS v$node_version"
        fi

        if str_equals "$uses_composer" "true"; then
            echo "  - PHP v$php_version"
        fi
    fi
}

project_list() {
    local table_rows=()

    local current_proj_code=$(project_current)

    # List all of the project repositories
    local repo_codes="$(jq -r ".[] | .code" "$HOME/projects/projects.json")"
    IFS=$'\n'
    read -r -d '' -a lines <<< "$repo_codes"
    for CODE in "${lines[@]}"; do
        local repo_name="$(jq -r --arg name "$CODE" '.[] | select(.code == $name) | .repo' "$HOME/projects/projects.json")"

        local COLOR=""
        if [[ "$CODE" == "$current_proj_code" ]]; then
            COLOR="$LSR_COLOR_GREEN"
        fi

        # Repository counts as cloned when:
        # - The a folder with the repo name exists
        if [[ -d "$HOME/projects/$repo_name" ]]; then
            table_rows+=("$LSR_COLOR_GREEN✔$LSR_COLOR_RESET,$COLOR$CODE$LSR_COLOR_RESET,$repo_name")
        else
            table_rows+=("$LSR_COLOR_RED✖$LSR_COLOR_RESET,$COLOR$CODE$LSR_COLOR_RESET,$repo_name")
        fi
    done

    table "Status,Code,Repository" "${table_rows[@]}"
}

project_install() {
    local project_entry="$(jq -r ".[] | select(.code == \"$1\")" "$HOME/projects/projects.json")"

    if [[ -n "$project_entry" ]]; then
        print_info "Creating local copy of project '$1'"

        local project_repo="$(jq -r ".[] | select(.code == \"$1\") | .repo" "$HOME/projects/projects.json")"
        local project_code="$1"

        # Git repository
        if [[ ! -d "$HOME/projects/$project_repo" ]]; then
            print_info "Cloning repository '$project_repo'..."

            git clone git@bitbucket.org:xingredient/$project_repo.git "$HOME/projects/$project_repo"
        else
            print_success "Repository '$project_repo' already cloned!"
        fi
    else
        print_error "No project found with code '$1'"
        return
    fi
}

project_go() {
    local query="$1"

    # If no query, list projects
    if [[ -z "$query" ]]; then
        project_list
        return 0
    fi

    local entry="$(jq ".[] | select(.code == \"$query\")" "$HOME/projects/projects.json")"

    # When not found, try with website- or demo- at start
    if str_empty "$entry"; then
        website_query="website-$query"
        demo_query="demo-$query"

        local entry="$(jq ".[] | select(.code == \"$website_query\")" "$HOME/projects/projects.json")"
    fi

    local project_dir="$HOME/projects/$(echo "$entry" | jq -r ".repo")"
    
    # Check if the provided project exists
    if ! str_empty "$entry"; then
        if [[ -d "$project_dir" ]]; then
            cd "$project_dir"
            exec "$(which bash)" --login
        else
            echo "Directory does not exist: $project_dir"
        fi
        return
    fi
    
    echo "Project '$query' not found. Available projects:"
    project_list
}

project_current() {
    local cwd
    cwd=$(pwd | xargs)  # Get the current working directory
    local foldername=$(basename "$cwd")

    local current_project="$(jq -r ".[] | select(.repo == \"$foldername\") | .code" "$HOME/projects/projects.json")"

    echo -n "$(echo "$current_project" | sed -E 's/^(website-|demo-)//')"
    echo

    if ! str_empty "$current_project"; then
        return 0
    fi

    # Handle LSR_EXTRA_PROJECTS
    if [[ -n "$LSR_EXTRA_PROJECTS" ]]; then
        
        # Loop over all of the extra projects
        local extra_project_count=$(lsrlist length LSR_EXTRA_PROJECTS)
        for ((i=0; i<extra_project_count; i++)); do
            local extra_project=$(lsrlist index LSR_EXTRA_PROJECTS "$i")
            local extra_project_name=$(echo "$extra_project" | cut -d':' -f1)
            local extra_project_dir=$(echo "$extra_project" | cut -d':' -f2)

            if [[ "$cwd" == "$extra_project_dir" ]]; then
                echo -e "$(echo "$extra_project_name" | sed -E 's/^(website-|demo-)//')"
            fi
        done
    fi
}

LSR_HANDLE_COMMAND "$@"
exit 0