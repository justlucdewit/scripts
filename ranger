source "$HOME/.lsr_core/core/lsr.core.sh"

function ranger_main_function() {
    LSR_SET_COMMAND "ranger"
    LSR_SET_SUBCOMMAND "eval" "--config=<config_file>"

    LSR_DESCRIBE_SUBCOMMAND "eval" "Evaluates a template from a certain directory"

    LSR_HANDLE_COMMAND "$@"
}

function ranger_eval() {
    LSR_CLI_INPUT_PARSER $@

    # Handling CLI input
    if ! LSR_PARAMETER_GIVEN "--config"; then
        echo "Error: No data file given"
        return
    fi

    local config_file=$(LSR_PARAMETER_VALUE "--config")
    local config_file_basepath=$(dirname "$config_file")
    echo "Info: Reading data from $config_file"

    # Getting the data as raw json string, escape all quotes and remove newlines
    local config=$(cat "$config_file")

    # Getting the full template path
    local main_template_file="$(echo "$config" | jq -r ".template")"

    if [[ "$main_template_file" == "" ]]; then
        main_template_file="template.html"
    fi

    # Get a list of all of the generations that we need to do
    local generations_count="$(jq ".generate | length" "$config_file")"

    for ((i=0; i<generations_count; i++)); do
        # Access each generation entry one by one
        generation=$(jq ".generate[$i]" "$config_file")

        # Get generation info
        generation_name=$(echo "$generation" | jq -r ".name")
        generation_template=$(echo "$generation" | jq -r ".template")
        generation_data_file=$(echo "$generation" | jq -r ".data")
        generation_output_file=$(echo "$generation" | jq -r ".output")


        echo "Info: Generating $generation_name"

        local old_path="$(pwd)"
        cd "$HOME/scripts"
        local output_code="$(python3 -c "from ranger_src import ranger; ranger.test(\"$old_path/$generation_template\", \"$old_path/$generation_data_file\", \"$old_path/$generation_output_file\")")"
        cd "$old_path"
        

        echo "$output_code" > "$generation_output_file"
    done

    return
}

ranger_main_function "$@"