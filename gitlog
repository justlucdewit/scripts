#! /bin/bash
source "$HOME/.lsr_core/core/lsr.core.sh"

LSR_SET_COMMAND "gitlog"

LSR_SET_SUBCOMMAND "list"
LSR_SET_SUBCOMMAND "inspect" "<commit hash>"

LSR_DESCRIBE_SUBCOMMAND "list" "List the previous commits in current repo"
LSR_DESCRIBE_SUBCOMMAND "inspect" "Inspect the changes done in a given commit hash"

LSR_CLI_INPUT_PARSER $@

# Function to map usernames
function map_username() {
    local original_username="$1"
    declare -A user_map=(
        ["lucdewit"]="Luc"
        ["Maurits van Mierlo"]="Maurits"
        ["Martijn Engelkes"]="Martijn"
        ["Gijs Beijer"]="Gijs"
        ["CK"]="Cem"
        ["Bram Gubbels"]="Bram"
    )
    # Return the mapped username if exists, otherwise return the original
    echo "${user_map[$original_username]:-$original_username}"
}

function gitlog_list() {
    # Number of latest commits to display
    local commit_count=11
    if LSR_PARAMETER_GIVEN "--count"; then
        commit_count="$(LSR_PARAMETER_VALUE "--count")"
        commit_count="$((commit_count + 1))"
    fi

    # Filters
    local user_filter=""
    if LSR_PARAMETER_GIVEN "--user"; then
        user_filter="$(LSR_PARAMETER_VALUE "--user")"
    fi

    local date_filter=""
    if LSR_PARAMETER_GIVEN "--date"; then
        date_filter="$(LSR_PARAMETER_VALUE "--date")"
    fi

    # Get the latest X commits and process them line by line
    local counter="0"
    git log --all --pretty=format:'%h#%an@%ad - %s' --date=short | while IFS= read -r line; do
        if [[ "$counter" -gt "$((commit_count - 2))" ]]; then
            break
        fi
        
        # Extract the short hash, username, date, and commit message using parameter expansion
        shorthash="${line%%#*}"
        rest="${line#*#}"
        username="${rest%@*}"
        rest="${rest#*@}"
        date="${rest%% -*}"
        commit_message="${rest#*- }"

        username="$(map_username "$username")"

        if [[ ( -n "$user_filter" && "$user_filter" != "$username" ) ]]; then
            continue
        fi

        # Make it coloured
        shorthash="$LSR_COLOR_BLUE$shorthash$LSR_COLOR_RESET"
        username="$LSR_COLOR_GREEN$username$LSR_COLOR_RESET"
        date="$LSR_COLOR_RED$date$LSR_COLOR_RESET"

        # Manually echo the values
        echo -e "$date@$shorthash#$username - $commit_message"

        counter="$((counter + 1))"
    done
}

function gitlog_inspect() {
    local commit_hash="$1"
    if [[ -z "$commit_hash" ]]; then
        echo "Error: No commit hash provided."
        exit 1
    fi

    # Get commit details
    local author_name
    local author_email
    local commit_date
    local commit_message

    author_name=$(git show -s --format='%an' "$commit_hash")
    author_email=$(git show -s --format='%ae' "$commit_hash")
    commit_date=$(git show -s --format='%ad' --date=short "$commit_hash")
    commit_message=$(git show -s --format='%s' "$commit_hash")

    # Get file changes summary
    local stats
    stats=$(git diff-tree --no-commit-id --name-status -r "$commit_hash")

    local files_created=0
    local files_deleted=0
    local files_modified=0

    declare -a file_changes

    while IFS= read -r line; do
        change_type="${line:0:1}"
        file_path="${line:2}"

        case "$change_type" in
            A) 
                ((files_created++))
                file_changes+=("$LSR_COLOR_GREEN$file_path$LSR_COLOR_RESET")
                ;;
            D) 
                ((files_deleted++))
                file_changes+=("$LSR_COLOR_RED$file_path$LSR_COLOR_RESET")
                ;;
            M) 
                ((files_modified++))
                # Get line additions and deletions
                line_stats=$(git diff --numstat "$commit_hash^!" -- "$file_path" | awk '{print "+"$1, "-"$2}')
                file_changes+=("$LSR_COLOR_BLUE$file_path$LSR_COLOR_RESET $line_stats")
                ;;
        esac
    done <<< "$stats"

    # Output results
    echo
    echo -e "Commit info for ${LSR_COLOR_GREEN}$commit_hash${LSR_COLOR_RESET}"
    echo -e "  Author: ${LSR_COLOR_YELLOW}$author_name${LSR_COLOR_RESET} <${LSR_COLOR_CYAN}$author_email${LSR_COLOR_RESET}>"
    echo -e "  Date:   ${LSR_COLOR_MAGENTA}$commit_date${LSR_COLOR_RESET}"
    echo -e "  Message: ${LSR_COLOR_WHITE}$commit_message${LSR_COLOR_RESET}"
    echo ""
    echo -e "Changes in commit"
    echo -e "  files created:${LSR_COLOR_GREEN}  $files_created${LSR_COLOR_RESET}"
    echo -e "  files deleted:${LSR_COLOR_GREEN}  $files_deleted${LSR_COLOR_RESET}"
    echo -e "  files modified:${LSR_COLOR_GREEN} $files_modified${LSR_COLOR_RESET}"
    echo
    echo "File changes"
    for change in "${file_changes[@]}"; do
        echo -e "  $change"
    done
    echo
}

LSR_HANDLE_COMMAND "${LSR_PARSED_ARGUMENTS[@]}"
exit 0