#! /bin/bash

# Script has to use tmux
# Script has to use nvm
# Script has to use jq
# Script has to use apt-get
source "$HOME/.lsr_core/core/lsr.core.sh"
[ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"

LSR_SET_COMMAND "project"
LSR_SET_SUBCOMMAND "list"
LSR_SET_SUBCOMMAND "go" "<projectname>"
LSR_SET_SUBCOMMAND "install" "<projectname>"
LSR_SET_SUBCOMMAND "uninstall" "<projectname>"
LSR_SET_SUBCOMMAND "start" "<projectname>"
LSR_SET_SUBCOMMAND "build" "<projectname>"
LSR_SET_SUBCOMMAND "current"
LSR_SET_SUBCOMMAND "links"
LSR_SET_SUBCOMMAND "info" "<projectname>"

LSR_DESCRIBE_SUBCOMMAND "list" "List all of the registered projects and demos"
LSR_DESCRIBE_SUBCOMMAND "go" "Go to the directory of the project"
LSR_DESCRIBE_SUBCOMMAND "install" "Install the project locally"
LSR_DESCRIBE_SUBCOMMAND "uninstall" "Install the project locally"
LSR_DESCRIBE_SUBCOMMAND "start" "Starts the project in the current terminal"
LSR_DESCRIBE_SUBCOMMAND "build" "Makes a build of the project"
LSR_DESCRIBE_SUBCOMMAND "current" "Shows the current project code"
LSR_DESCRIBE_SUBCOMMAND "links" "List all websites or resources belonging to this project"
LSR_DESCRIBE_SUBCOMMAND "info" "Show info about project"

LSR_CLI_INPUT_PARSER $@

DEFAULT_CONFIG_TO_CURRENT="true"

project_repo_to_name() {
    local repo="$1"

    # Make sure git repository is cloned
    if [[ "$repo" == "codecommit::"* ]]; then
        # Codecommit repository
        repo=$(echo "$repo" | sed -E 's|.*//([^/]+)|\1|')
    fi

    echo "$repo"
}

project_query_to_code() {
    local query="$1"

    if str_empty "$query" && str_equals "$DEFAULT_CONFIG_TO_CURRENT" "true"; then
        query="$(project_current)"
    fi

    local project_code1="$(jq -r ".[] | select(.code == \"$query\") | .code" "$HOME/projects/projects.json")"
    local project_code2="$(jq -r ".[] | select(.code == \"website-$query\") | .code" "$HOME/projects/projects.json")"
    local project_code3="$(jq -r ".[] | select(.code == \"demo-$query\") | .code" "$HOME/projects/projects.json")"
    local project_code4="$(jq -r ".[] | select(.code == \"demo-\" + .client + \"-$query\") | .code" "$HOME/projects/projects.json")"
    local project_code5="$(jq -r ".[] | select(.code == \"website-\" + .client + \"-$query\") | .code" "$HOME/projects/projects.json")"

    if ! str_empty "$project_code1"; then
        echo "$project_code1"
        return
    fi

    if ! str_empty "$project_code2"; then
        echo "$project_code2"
        return
    fi

    if ! str_empty "$project_code3"; then
        echo "$project_code3"
        return
    fi

    if ! str_empty "$project_code4"; then
        echo "$project_code4"
        return
    fi

    if ! str_empty "$project_code5"; then
        echo "$project_code5"
        return
    fi
}

project_helper_find_config() {
    local query="$1"
    local project_code="$(project_query_to_code "$query")"

    if str_empty "$query" && str_equals "$DEFAULT_CONFIG_TO_CURRENT" "true"; then
        query="$(project_current)"
    fi

    local project_json="$(jq -r ".[] | select(.code == \"$project_code\")" "$HOME/projects/projects.json")"
    echo "$project_json"
}

project_code_to_query() {
    local code="$1"
    local code="$(project_query_to_code "$code")"
    local json="$(project_helper_find_config "$code")"
    local client="$(echo "$json" | jq -r ".client")"

    code="$(echo "$code" | sed -E 's/^(website-|demo-)//')"
    if [[ "$client" != "null" ]]; then
        code="$(echo "$code" | sed -E "s/^($client-)//")"
    fi

    echo "$code"
}

project_info() {
    local project_json="$(project_helper_find_config "$query")"

    local project_active="$(echo "$project_json" | jq -r ".active")"
    local project_repo="$(echo "$project_json" | jq -r ".repo")"
    local project_dir="$(echo "$project_json" | jq -r ".dir")"
    local project_code="$(echo "$project_json" | jq -r ".code")"
    local project_websites="$(echo "$project_json" | jq -r "(.sites // []) | to_entries[] | .key")"
    local project_servers="$(echo "$project_json" | jq -r "(.forgeIds // []) | to_entries[] | .key")"

    echo
    echo "Project Info for '$project_code'"
    if str_equals "$project_active" "true"; then
        echo "  - Project is active"
    else
        echo "  - Project is inactive"
    fi

    echo "  - Repository: https://bitbucket.org/xingredient/$project_repo/src"

    echo
    echo "Technology used: "
    local tech_used="$(echo "$project_json" | jq -r ".versions | to_entries[] | .key")"
    for tech in $(echo "$tech_used" | tr '\n' ' '); do
        local version="$(echo "$project_json" | jq -r ".versions.$tech")"
        echo -e "  - $LSR_COLOR_GREEN$tech:$LSR_COLOR_RESET v$version"
    done

    echo
    local branches_list="$(git for-each-ref --format='%(refname:short) %(authordate:short) %(authorname)' refs/heads)"
    local normal_count=0
    local feature_count=0
    local text_buffer=""
    while read -r branch date author; do
        if [[ "$branch" == feature/* ]]; then
            ((feature_count++))
        else
            ((normal_count++))
        fi
        
        if [[ -n text_buffer ]]; then
            text_buffer+=$'\n'
        fi
        text_buffer="$text_buffer - $branch (last updated on $LSR_COLOR_GREEN$date$LSR_COLOR_RESET by $LSR_COLOR_GREEN$author$LSR_COLOR_RESET)"
    done <<< "$branches_list"
    echo "Branches ($normal_count normal branches; $feature_count feature branches):"
    echo -e "$text_buffer"

    echo
}

project_list() {
    local table_rows=()

    local current_proj_code=$(project_current)

    # List all of the project repositories
    local repo_codes="$(jq -r ".[] | select(.active == true) | .code" "$HOME/projects/projects.json")"

    if LSR_PARAMETER_GIVEN "--type"; then
        local type_filter="$(LSR_PARAMETER_VALUE "--type")"
        local repo_codes="$(jq -r ".[] | select(.active == true) | select(.type == \"$type_filter\") | .code" "$HOME/projects/projects.json")"
    else
        local repo_codes="$(jq -r ".[] | select(.active == true) | .code" "$HOME/projects/projects.json")"
    fi

    if LSR_PARAMETER_GIVEN "--name"; then
        local name_filter="$(LSR_PARAMETER_VALUE "--name")"
    fi

    local gitmode_enabled=false
    if LSR_IS_FLAG_ENABLED "--git"; then
        gitmode_enabled=true
    fi

    IFS=$'\n'
    read -r -d '' -a lines <<< "$repo_codes"
    for CODE in "${lines[@]}"; do
        local repo_name="$(jq -r --arg name "$CODE" '.[] | select(.code == $name) | .dir' "$HOME/projects/projects.json")"

        # Skip if code doesnt match name filter
        if [[ "$CODE" != *"$name_filter"* ]]; then
            continue
        fi

        # Make color green when is current project
        local COLOR=""
        if [[ "$CODE" == "$current_proj_code" ]]; then
            COLOR="$LSR_COLOR_GREEN"
        fi

        # CODE="$(project_code_to_query "$CODE")"
        local value_project_name="$COLOR$CODE$LSR_COLOR_RESET"

        local value_project_cloned="$LSR_COLOR_GREEN✔$LSR_COLOR_RESET"
        if [[ ! -d "$HOME/projects/$repo_name" ]]; then
            local value_project_cloned="$LSR_COLOR_RED✖$LSR_COLOR_RESET"
        fi

        local value_project_dependencies="$LSR_COLOR_GREEN✔$LSR_COLOR_RESET"
        if [[ -f "$HOME/projects/$repo_name/package.json" && ! -d "$HOME/projects/$repo_name/node_modules" ]]; then
            local value_project_dependencies="$LSR_COLOR_RED✖$LSR_COLOR_RESET"
        fi

        if [[ -f "$HOME/projects/$repo_name/composer.json" && ! -d "$HOME/projects/$repo_name/vendor" ]]; then
            local value_project_dependencies="$LSR_COLOR_RED✖$LSR_COLOR_RESET"
        fi

        local row_entry="$value_project_name,$value_project_cloned,$value_project_dependencies"
        if [[ $gitmode_enabled == "true" ]]; then
            cd "./$repo_name"
            git fetch --all
            last_change_date="$(git log --all --date=format:"%d-%m-%Y" --format="%ad" -n 1)"
            cd "$HOME/projects"
            row_entry="$row_entry,hallo"
        fi

        table_rows+=("$row_entry")
    done

    local rows="Project,Cloned,Libs"

    if [[ $gitmode_enabled == "true" ]]; then
        rows="$rows,Last change"
    fi

    table "$rows" "${table_rows[@]}"
}

# uninstallation of node packages
# uninstallation of composer packages
project_uninstall() {
    local project_entry="$(project_helper_find_config "$1")"

    if str_empty "$project_entry"; then
        print_error "No project found with code '$1'"
        return
    fi

    local project_repo="$(echo "$project_entry" | jq -r ".dir")"

    # Uninstall node packages
    if [[ -d "$HOME/projects/$project_repo/node_modules" ]]; then
        print_success "Uninstalled node packages"
        rm -rf "$HOME/projects/$project_repo/node_modules"
    fi

    #Uninstall composer packages
    if [[ -d "$HOME/projects/$project_repo/vendor" ]]; then
        print_success "Uninstalled composer"
        rm -rf "$HOME/projects/$project_repo/vendor"
    fi
}

# installation of repository
# installation of node version
# installation of php version
# installation of node packages
# installation of composer packages
project_install() {
    local project_entry="$(project_helper_find_config "$1")"

    if str_empty "$project_entry"; then
        print_error "No project found with code '$1'"
        return
    fi

    local project_code="$(echo "$project_entry" | jq -r ".code")"
    local project_repo="$(echo "$project_entry" | jq -r ".repo")"
    local project_dir="$(echo "$project_entry" | jq -r ".dir")"
    local node_version="$(echo "$project_entry" | jq -r ".versions.node // \"\"")"
    local php_version="$(echo "$project_entry" | jq -r ".versions.php // \"\"")"

    # Make sure git repository is cloned
    if [[ "$project_repo" == "codecommit::"* ]]; then

        # Default URL repo
        if [[ ! -d "$HOME/projects/$project_dir" ]]; then
            print_info "Cloning repository '$project_dir'..."
            git clone $project_repo "$HOME/projects/$project_dir"
        else
            print_success "Repository '$project_dir' already cloned!"
        fi
    else
        # Default URL repo
        if [[ ! -d "$HOME/projects/$project_dir" ]]; then
            print_info "Cloning repository '$project_dir'..."

            git clone git@bitbucket.org:xingredient/$project_dir.git "$HOME/projects/$project_dir"
        else
            print_success "Repository '$project_dir' already cloned!"
        fi
    fi


    # Make sure node version is installed
    if [[ -n "$node_version" ]]; then
        if [[ "$(nvm ls "$node_version")" == *"N/A"* ]]; then
            print_info "Installing node v$node_version..."
            nvm i "$node_version"
        else
            print_success "Node v$node_version already installed!"
        fi

        nvm use "$node_version" > /dev/null
    fi

    # Make sure php version is installed
    if [[ -n "$php_version" ]]; then
        if [[ -z "$(which "php$php_version")" ]]; then
            print_info "Installing PhP v$php_version..."
            sudo apt-get install "$php_version"
        else
            print_success "PhP v$php_version already installed!"
        fi
        sudo update-alternatives --set php /usr/bin/php$php_version > /dev/null
    fi


    # Make sure npm packages are installed when available
    if [[ -f "$HOME/projects/$project_dir/package.json" ]]; then
        if [[ ! -d "$HOME/projects/$project_dir/node_modules" ]]; then
            print_info "Installing node packages..."
            cd "$HOME/projects/$project_dir"
            npm install
        else
            print_success "Node packages already installed..."
        fi
    fi

    # Make sure composer packages are installed when available
    if [[ -f "$HOME/projects/$project_dir/composer.json" ]]; then
        if [[ ! -d "$HOME/projects/$project_dir/vendor" ]]; then
            print_info "Installing composer packages..."
            cd "$HOME/projects/$project_dir"
            composer install
        else
            print_success "Composer packages already installed..."
        fi
    fi
}

project_start() {
    local project_entry="$(project_helper_find_config "$1")"

    if str_empty "$project_entry"; then
        print_error "No project found with code '$1'"
        return
    fi

    local project_code="$(echo "$project_entry" | jq -r ".code")"
    local project_repo="$(echo "$project_entry" | jq -r ".repo")"
    local project_dir="$(echo "$project_entry" | jq -r ".dir")"
    local node_version="$(echo "$project_entry" | jq -r ".versions.node // \"\"")"
    local php_version="$(echo "$project_entry" | jq -r ".versions.php // \"\"")"
    local on_start_commands="$(echo "$project_entry" | jq -r '.config.on_start // empty | .[]')"

    # Use the correct php and npm versions if defined
    if [[ -n "$php_version" ]]; then
        sudo update-alternatives --set php /usr/bin/php$php_version > /dev/null
    fi

    if [[ -n "$node_version" ]]; then
        nvm use $node_version
    fi

    # Change the directory to the project
    current_pane=$(tmux display-message -p '#{pane_id}')
    tmux send-keys -t "$current_pane" "cd $HOME/projects/$project_dir" C-m

    # Execute the on_start commands
    while IFS= read -r command; do
        tmux send-keys -t "$current_pane" "$command" C-m    
    done <<< "$on_start_commands"
}

project_build() {
    local project_entry="$(project_helper_find_config "$1")"

    if str_empty "$project_entry"; then
        print_error "No project found with code '$1'"
        return
    fi

    local project_code="$(echo "$project_entry" | jq -r ".code")"
    local project_repo="$(echo "$project_entry" | jq -r ".repo")"
    local project_dir="$(echo "$project_entry" | jq -r ".dir")"
    local node_version="$(echo "$project_entry" | jq -r ".versions.node // \"\"")"
    local php_version="$(echo "$project_entry" | jq -r ".versions.php // \"\"")"
    local on_build_commands="$(echo "$project_entry" | jq -r '.config.on_build // empty | .[]')"

    # Use the correct php and npm versions if defined
    if [[ -n "$php_version" ]]; then
        sudo update-alternatives --set php /usr/bin/php$php_version > /dev/null
    fi

    if [[ -n "$node_version" ]]; then
        nvm use $node_version
    fi

    # Change the directory to the project
    current_pane=$(tmux display-message -p '#{pane_id}')
    tmux send-keys -t "$current_pane" "cd $HOME/projects/$project_dir" C-m

    # Execute the on_start commands
    while IFS= read -r command; do
        tmux send-keys -t "$current_pane" "$command" C-m    
    done <<< "$on_build_commands"
}

project_go() {
    local query="$1"

    # If no query, list projects
    if [[ -z "$query" ]]; then
        project_list
        return 0
    fi

    local entry="$(project_helper_find_config "$query")"

    local project_repo="$HOME/projects/$(echo "$entry" | jq -r ".repo")"
    local project_dir="$HOME/projects/$(echo "$entry" | jq -r ".dir")"
    project_repo="$(project_repo_to_name "$project_repo")"
    
    # Check if the provided project exists
    if ! str_empty "$entry"; then
        if [[ -d "$project_dir" ]]; then
            current_pane=$(tmux display-message -p '#{pane_id}')
            tmux send-keys -t "$current_pane" "cd $project_dir" C-m
        else
            echo "Directory does not exist: $project_dir"
        fi
        return
    fi
    
    echo "Project '$query' not found. Available projects:"
    project_list
}

project_current() {
    local cwd
    cwd=$(pwd | xargs)  # Get the current working directory
    local foldername=$(basename "$cwd")

    DEFAULT_CONFIG_TO_CURRENT="false"
    local current_project_code="$(jq -r ".[] | select(.dir == \"$foldername\") | .code" "$HOME/projects/projects.json" | sed -E 's/^(website-|demo-)//')"
    local current_project_json=$(project_helper_find_config "$current_project_code")
    local current_project_client="$(echo "$current_project_json" | jq -r ".client")"
    DEFAULT_CONFIG_TO_CURRENT="false"

    current_project_code="$(echo "$current_project_code" | sed -E "s/^($current_project_client-)//")"

    echo "$current_project_code"
}

project_links() {
    local project_entry="$(project_helper_find_config "$1")"

    if str_empty "$project_entry"; then
        print_error "No project found with code '$1'"
        return
    fi

    local project_site_keys="$(echo "$project_entry" | jq -r ".sites | to_entries[] | .key")"
    local project_forgeIds_keys="$(echo "$project_entry" | jq -r ".forgeIds | to_entries[] | .key")"
    
    echo
    echo "Websites: "
    for key in $(echo "$project_site_keys" | tr '\n' ' '); do
        local project_site_value="$(echo "$project_entry" | jq -r ".sites[\"$key\"]")"
        echo -e "$LSR_COLOR_GREEN  website $key$LSR_COLOR_RESET => $project_site_value"
    done

    echo
    echo "Forge Sites: "
    for key in $(echo "$project_forgeIds_keys" | tr '\n' ' '); do
        local forge_server="$(echo "$project_entry" | jq -r ".forgeIds[\"$key\"].server")"
        local forge_site="$(echo "$project_entry" | jq -r ".forgeIds[\"$key\"].site")"
        echo -e "$LSR_COLOR_GREEN  forge $key$LSR_COLOR_RESET => https://forge.laravel.com/servers/$forge_server/sites/$forge_site"
    done

    echo
    echo "SSH Connections: "
    for key in $(echo "$project_forgeIds_keys" | tr '\n' ' '); do
        echo -e "$LSR_COLOR_GREEN  server $key$LSR_COLOR_RESET => open-ssh forge@$key"
    done

    echo
}

LSR_HANDLE_COMMAND "${LSR_PARSED_ARGUMENTS[@]}"
exit 0